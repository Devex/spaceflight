// Package surgeon contains the types for schema 'public'.
package surgeon

import "fmt"

// GENERATED BY XO. DO NOT EDIT.

// Block represents a row from '[custom block]'.
type Block struct {
	BlockedPid    int    // bdpid
	BlockedUser   Name   // bduser
	BlockingPid   int    // bgpid
	BlockingUser  Name   // bguser
	BlockedQuery  string // bdquery
	BlockingQuery string // bgquery
}

// BlockList represents a list of Blocks.
type BlockList struct {
	Blocks []Block
}

// String provides a string formatting to BlockList
func (bl BlockList) String() (output string) {
	output = fmt.Sprintf(
		" %11s %13s %12s %14s %20s %20s \n",
		"BLOCKED PID",
		"BLOCKED USER",
		"BLOCKING PID",
		"BLOCKING USER",
		"BLOCKED QUERY",
		"BLOCKING QUERY",
	)
	for _, block := range bl.Blocks {
		output += fmt.Sprintf(
			" %11d %13s %12d %14s %20s %20s \n",
			block.BlockedPid,
			block.BlockedUser,
			block.BlockingPid,
			block.BlockingUser,
			block.BlockedQuery,
			block.BlockingQuery,
		)
	}
	return
}

// GetBlocks runs a custom query, returning results as Block.
func GetBlocks(db XODB, options map[string]bool) (fmt.Stringer, error) {
	var err error

	// sql query
	const sqlstr = `` +
		`SELECT bdl.pid     AS bdpid,` +
		`       bda.usename AS bduser,` +
		`       bgl.pid     AS bgpid,` +
		`       bga.usename AS bguser,` +
		`       bda.query   AS bdquery,` +
		`       bga.query   AS bgquery ` +
		`FROM pg_locks         bdl ` +
		`JOIN pg_stat_activity bda` +
		`  ON bda.pid = bdl.pid ` +
		`JOIN pg_locks         bgl` +
		`  ON bgl.locktype = bdl.locktype` +
		` AND bgl.database IS NOT DISTINCT FROM bdl.database` +
		` AND bgl.relation IS NOT DISTINCT FROM bdl.relation` +
		` AND bgl.page IS NOT DISTINCT FROM bdl.page` +
		` AND bgl.tuple IS NOT DISTINCT FROM bdl.tuple` +
		` AND bgl.virtualxid IS NOT DISTINCT FROM bdl.virtualxid` +
		` AND bgl.transactionid IS NOT DISTINCT FROM bdl.transactionid` +
		` AND bgl.classid IS NOT DISTINCT FROM bdl.classid` +
		` AND bgl.objid IS NOT DISTINCT FROM bdl.objid` +
		` AND bgl.objsubid IS NOT DISTINCT FROM bdl.objsubid` +
		` AND bgl.pid != bdl.pid ` +
		`JOIN pg_stat_activity bga` +
		`  ON bga.pid = bgl.pid ` +
		`WHERE NOT bdl.GRANTED`

	// run query
	res := BlockList{
		Blocks: nil,
	}
	XOLog(sqlstr)
	q, err := db.Query(sqlstr)
	if err != nil {
		return res, err
	}
	defer q.Close()

	// load results
	for q.Next() {
		b := Block{}

		// scan
		err = q.Scan(
			&b.BlockedPid,
			&b.BlockedUser,
			&b.BlockingPid,
			&b.BlockingUser,
			&b.BlockedQuery,
			&b.BlockingQuery,
		)
		if err != nil {
			return res, err
		}

		res.Blocks = append(res.Blocks, b)
	}

	return res, nil
}
