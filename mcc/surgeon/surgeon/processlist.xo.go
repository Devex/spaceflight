// Package surgeon contains the types for schema 'public'.
package surgeon

// GENERATED BY XO. DO NOT EDIT.

// Process represents a row from '[custom process_list2]'.
type Process struct {
	Pid      int      // pid
	Usename  Name     // usename
	Datname  Name     // datname
	Client   Inet     // client_addr
	Duration Duration // duration
	Query    string   // query
	Waiting  string   // waiting
}

// IsActive returns true if the Process was active when extracted.
func (ps Process) IsActive() bool {
	return ps.Query != "Inactive"
}

// ProcessList represents a slice of Process.
type ProcessList []Process

// Len returns the length of a ProcessList.
func (ps ProcessList) Len() int {
	return len(ps)
}

// Less returns whether a Process is less than another in a ProcessList.
func (ps ProcessList) Less(i, j int) bool {
	return ps[i].Duration.Seconds() < ps[j].Duration.Seconds()
}

// Swap exchanges two Processes in the ProcessList.
func (ps ProcessList) Swap(i, j int) {
	ps[i], ps[j] = ps[j], ps[i]
}

// GetProcessLists runs a custom query, returning results as ProcessList.
func GetProcessLists(db XODB) (ProcessList, error) {
	var err error

	// sql query
	const sqlstr = `SELECT` +
		`      pid,` +
		`      usename,` +
		`      datname,` +
		`      client_addr,` +
		`      CASE` +
		`      WHEN state = 'active'::text THEN` +
		`        EXTRACT(EPOCH FROM now() - query_start)` +
		`      WHEN state = 'idle in transcation'::text THEN` +
		`        EXTRACT(EPOCH FROM now() - xact_start)` +
		`      ELSE` +
		`        EXTRACT(EPOCH FROM now() - state_change)` +
		`      END AS duration,` +
		`      CASE` +
		`      WHEN state = 'active'::text THEN` +
		`        CASE` +
		`        WHEN query IS NOT NULL THEN` +
		`          btrim(` +
		`            regexp_replace(` +
		`              regexp_replace(` +
		`                substring(query,0,80),` +
		`                E'[\n\r\u2028]+', '', 'g'` +
		`              ),` +
		`              E'[ ]+', ' ', 'g'` +
		`            ),` +
		`          ' ')` +
		`        ELSE` +
		`          'No query'` +
		`        END` +
		`      ELSE` +
		`        'Inactive'` +
		`      END AS query,` +
		`      CASE` +
		`      WHEN waiting THEN` +
		`        'true'` +
		`      ELSE` +
		`        'false'` +
		`      END` +
		`    FROM pg_stat_activity` +
		`    WHERE query NOT ILIKE '%pg_stat_activity%'`

	// run query
	XOLog(sqlstr)
	q, err := db.Query(sqlstr)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := ProcessList{}
	for q.Next() {
		pl := Process{}

		// scan
		err = q.Scan(
			&pl.Pid,
			&pl.Usename,
			&pl.Datname,
			&pl.Client,
			&pl.Duration,
			&pl.Query,
			&pl.Waiting,
		)
		if err != nil {
			return nil, err
		}

		res = append(res, pl)
	}

	return res, nil
}
